package DataStructuresAssignment;

public class NQueensSolve {
	
	static int n;
	static int[][] board;
	static int rowsFilled;
	
	public static void setN(int n1) {
		n = n1;
		rowsFilled = 0;
		board = new int[n][n];
        solveNQ(); 
	}
	
	public static void solveNQ() {   
		QueenCoordsStack queens = new QueenCoordsStack();
		queens.push(new Queen(0, 0)); 
		// start at top left corner, imagine it's the bottom left 
		board[0][0] = 1;
		while (rowsFilled != n) {
			Queen top = queens.pop();
			boolean conflict = conflict(top.getX(), top.getY()+1);
			if (!conflict) {
				rowsFilled++;
				if (rowsFilled==n) {
					break;
				} else {
					// place queen in next row, column 0
					int y = queens.peek().getY();
					queens.push(new Queen(0, y+1));
					board[0][y+1] = 1;
				}
			} else if (conflict && !queens.isEmpty() && queens.peek().shiftable()) {
				int x = queens.peek().getX();
				int y = queens.peek().getY();
				queens.pop();
				queens.push(new Queen(x+1, y)); // move queen column++
				board[x][y] = 0;
				board[x+1][y] = 1; // change their position in the array
			} else if (conflict && !queens.isEmpty() && !queens.peek().shiftable()) {
				int x = queens.peek().getX();
				int y = queens.peek().getY();
				board[x][y] = 0;
				queens.pop(); // pop the stack
				while (!queens.peek().shiftable()) {
					rowsFilled--;
				}
			}			
		}
        printChessBoard(board); 
    } 
	
	public static boolean conflict(int row, int col) { 
        for (int i = 0; i < n; i++) {
            if (board[row][i] == 1) {
            	return true; 	
            }
        }
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
            	return true; 
            }
        }
        for (int i = row, j = col; j >= 0 && i < n; i++, j--) {
            if (board[i][j] == 1) {
            	return true;
            }     
        }
        return false; 
    } 
	
    public static void printChessBoard(int board[][]) { 
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j < n; j++) {
            	String character = "";
            	if (board[i][j]==0) {
            		character = ".";
            	} else {
            		character = "Q";
            	}
                NQueensDriver.print(" " + character + " "); 
            }
            System.out.println(); 
        } 
    } 
    
}
